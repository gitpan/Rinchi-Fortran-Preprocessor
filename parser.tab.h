/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ECS_NULL = 258,
     ASC_SOH = 259,
     ASC_STX = 260,
     ASC_ETX = 261,
     ASC_EOT = 262,
     ASC_ENQ = 263,
     ASC_ACK = 264,
     ECS_ALERT = 265,
     ECS_BACKSPACE = 266,
     BCS_WHTSP_TAB = 267,
     BCS_WHTSP_NEWLINE = 268,
     BCS_WHTSP_VERTICAL_TAB = 269,
     BCS_WHTSP_FORMFEED = 270,
     ECS_CARRIAGE_RETURN = 271,
     ASC_SHIFT_OUT = 272,
     ASC_SHIFT_IN = 273,
     ASC_DLE = 274,
     ASC_DC1 = 275,
     ASC_DC2 = 276,
     ASC_DC3 = 277,
     ASC_DC4 = 278,
     ASC_NAK = 279,
     ASC_SYN = 280,
     ASC_ETB = 281,
     ASC_CAN = 282,
     ASC_EM = 283,
     ASC_SUB = 284,
     ASC_ESC = 285,
     ASC_IS4 = 286,
     ASC_IS3 = 287,
     ASC_IS2 = 288,
     ASC_IS1 = 289,
     BCS_WHTSP_SPACE = 290,
     BCS_PUNCT_EXCLAMATION = 291,
     BCS_PUNCT_QUOTE = 292,
     BCS_PUNCT_HASH = 293,
     ASC_DOLLAR_SIGN = 294,
     BCS_PUNCT_PERCENT = 295,
     BCS_PUNCT_AMPERSAND = 296,
     BCS_PUNCT_APOSTROPHE = 297,
     BCS_PUNCT_OPEN_PARENTHESIS = 298,
     BCS_PUNCT_CLOSE_PARENTHESIS = 299,
     BCS_PUNCT_ASTERISK = 300,
     BCS_PUNCT_PLUS = 301,
     BCS_PUNCT_COMMA = 302,
     BCS_PUNCT_MINUS = 303,
     BCS_PUNCT_PERIOD = 304,
     BCS_PUNCT_SLASH = 305,
     BCS_DIGIT_0 = 306,
     BCS_DIGIT_1 = 307,
     BCS_DIGIT_2 = 308,
     BCS_DIGIT_3 = 309,
     BCS_DIGIT_4 = 310,
     BCS_DIGIT_5 = 311,
     BCS_DIGIT_6 = 312,
     BCS_DIGIT_7 = 313,
     BCS_DIGIT_8 = 314,
     BCS_DIGIT_9 = 315,
     BCS_PUNCT_COLON = 316,
     BCS_PUNCT_SEMICOLON = 317,
     BCS_PUNCT_LESS_THAN = 318,
     BCS_PUNCT_EQUAL = 319,
     BCS_PUNCT_GREATER_THAN = 320,
     BCS_PUNCT_QUESTION = 321,
     ASC_AT_SIGN = 322,
     BCS_UPPER_A = 323,
     BCS_UPPER_B = 324,
     BCS_UPPER_C = 325,
     BCS_UPPER_D = 326,
     BCS_UPPER_E = 327,
     BCS_UPPER_F = 328,
     BCS_UPPER_G = 329,
     BCS_UPPER_H = 330,
     BCS_UPPER_I = 331,
     BCS_UPPER_J = 332,
     BCS_UPPER_K = 333,
     BCS_UPPER_L = 334,
     BCS_UPPER_M = 335,
     BCS_UPPER_N = 336,
     BCS_UPPER_O = 337,
     BCS_UPPER_P = 338,
     BCS_UPPER_Q = 339,
     BCS_UPPER_R = 340,
     BCS_UPPER_S = 341,
     BCS_UPPER_T = 342,
     BCS_UPPER_U = 343,
     BCS_UPPER_V = 344,
     BCS_UPPER_W = 345,
     BCS_UPPER_X = 346,
     BCS_UPPER_Y = 347,
     BCS_UPPER_Z = 348,
     BCS_PUNCT_OPEN_BRACKET = 349,
     BCS_PUNCT_BACKSLASH = 350,
     BCS_PUNCT_CLOSE_BRACKET = 351,
     BCS_PUNCT_CARET = 352,
     BCS_PUNCT_UNDERSCORE = 353,
     BCS_LOWER_A = 354,
     BCS_LOWER_B = 355,
     BCS_LOWER_C = 356,
     BCS_LOWER_D = 357,
     BCS_LOWER_E = 358,
     BCS_LOWER_F = 359,
     BCS_LOWER_G = 360,
     BCS_LOWER_H = 361,
     BCS_LOWER_I = 362,
     BCS_LOWER_J = 363,
     BCS_LOWER_K = 364,
     BCS_LOWER_L = 365,
     BCS_LOWER_M = 366,
     BCS_LOWER_N = 367,
     BCS_LOWER_O = 368,
     BCS_LOWER_P = 369,
     BCS_LOWER_Q = 370,
     BCS_LOWER_R = 371,
     BCS_LOWER_S = 372,
     BCS_LOWER_T = 373,
     BCS_LOWER_U = 374,
     BCS_LOWER_V = 375,
     BCS_LOWER_W = 376,
     BCS_LOWER_X = 377,
     BCS_LOWER_Y = 378,
     BCS_LOWER_Z = 379,
     BCS_PUNCT_OPEN_BRACE = 380,
     BCS_PUNCT_VERTICAL_BAR = 381,
     BCS_PUNCT_CLOSE_BRACE = 382,
     BCS_PUNCT_TILDE = 383,
     ASC_DEL = 384,
     ALT_PUNCT_OPEN_BRACE = 385,
     ALT_PUNCT_CLOSE_BRACE = 386,
     ALT_PUNCT_OPEN_BRACKET = 387,
     ALT_PUNCT_CLOSE_BRACKET = 388,
     ALT_PUNCT_HASH = 389,
     KWD_ABSTRACT = 390,
     KWD_ABSTRACT_INTERFACE = 391,
     KWD_ACCESS = 392,
     KWD_ACTION = 393,
     KWD_ADVANCE = 394,
     KWD_ALLOCATABLE = 395,
     KWD_ALLOCATE = 396,
     KWD_ASSIGN = 397,
     KWD_ASSOCIATE = 398,
     KWD_ASYNCHRONOUS = 399,
     KWD_BACKSPACE = 400,
     KWD_BIND = 401,
     KWD_BLANK = 402,
     KWD_BLOCK = 403,
     KWD_BLOCK_DATA = 404,
     KWD_CALL = 405,
     KWD_CASE = 406,
     KWD_CHARACTER = 407,
     KWD_CLASS = 408,
     KWD_CLASS_DEFAULT = 409,
     KWD_CLASS_IS = 410,
     KWD_CLOSE = 411,
     KWD_COMMON = 412,
     KWD_COMPLEX = 413,
     KWD_CONTAINS = 414,
     KWD_CONTIGUOUS = 415,
     KWD_CONTINUE = 416,
     KWD_CYCLE = 417,
     KWD_DATA = 418,
     KWD_DEALLOCATE = 419,
     KWD_DEFAULT = 420,
     KWD_DEFERRED = 421,
     KWD_DIMENSION = 422,
     KWD_DIRECT = 423,
     KWD_DO = 424,
     KWD_DOUBLE = 425,
     KWD_DOUBLE_COMPLEX = 426,
     KWD_DOUBLE_PRECISION = 427,
     KWD_ELEMENTAL = 428,
     KWD_ELSE = 429,
     KWD_ELSE_IF = 430,
     KWD_ELSE_WHERE = 431,
     KWD_ENCODING = 432,
     KWD_END = 433,
     KWD_END_ASSOCIATE = 434,
     KWD_END_BLOCK = 435,
     KWD_END_BLOCK_DATA = 436,
     KWD_END_DO = 437,
     KWD_END_ENUM = 438,
     KWD_END_FILE = 439,
     KWD_END_FORALL = 440,
     KWD_END_FUNCTION = 441,
     KWD_END_IF = 442,
     KWD_END_INTERFACE = 443,
     KWD_END_MODULE = 444,
     KWD_END_PROCEDURE = 445,
     KWD_END_PROGRAM = 446,
     KWD_END_SELECT = 447,
     KWD_END_SUBMODULE = 448,
     KWD_END_SUBROUTINE = 449,
     KWD_END_TYPE = 450,
     KWD_END_WHERE = 451,
     KWD_ENTRY = 452,
     KWD_EOR = 453,
     KWD_EQUIVALENCE = 454,
     KWD_ERR = 455,
     KWD_ERRMSG = 456,
     KWD_EXIST = 457,
     KWD_EXIT = 458,
     KWD_EXTENDS = 459,
     KWD_EXTENSIBLE = 460,
     KWD_EXTERNAL = 461,
     KWD_FALSE = 462,
     KWD_FILE = 463,
     KWD_FINAL = 464,
     KWD_FLUSH = 465,
     KWD_FMT = 466,
     KWD_FORALL = 467,
     KWD_FORM = 468,
     KWD_FORMAT = 469,
     KWD_FORMATTED = 470,
     KWD_FUNCTION = 471,
     KWD_GENERIC = 472,
     KWD_GOTO = 473,
     KWD_IF = 474,
     KWD_IMPLICIT = 475,
     KWD_IMPLICIT_NONE = 476,
     KWD_IMPORT = 477,
     KWD_IMPURE = 478,
     KWD_IN = 479,
     KWD_IN_OUT = 480,
     KWD_INCLUDE = 481,
     KWD_INQUIRE = 482,
     KWD_INTEGER = 483,
     KWD_INTENT = 484,
     KWD_INTERFACE = 485,
     KWD_INTRINSIC = 486,
     KWD_IOSTAT = 487,
     KWD_IOMSG = 488,
     KWD_KIND = 489,
     KWD_LET = 490,
     KWD_LOGICAL = 491,
     KWD_MODULE = 492,
     KWD_MOLD = 493,
     KWD_NAME = 494,
     KWD_NAMED = 495,
     KWD_NAMELIST = 496,
     KWD_NEXTREC = 497,
     KWD_NON_INTRINSIC = 498,
     KWD_NON_OVERRIDABLE = 499,
     KWD_NONKIND = 500,
     KWD_NONE = 501,
     KWD_NOPASS = 502,
     KWD_NULLIFY = 503,
     KWD_NUMBER = 504,
     KWD_OPEN = 505,
     KWD_OPENED = 506,
     KWD_OPERATOR = 507,
     KWD_OPTIONAL = 508,
     KWD_OUT = 509,
     KWD_PAD = 510,
     KWD_PARAMETER = 511,
     KWD_PASS = 512,
     KWD_PAUSE = 513,
     KWD_PENDING = 514,
     KWD_POINTER = 515,
     KWD_POSITION = 516,
     KWD_PRECISION = 517,
     KWD_PRINT = 518,
     KWD_PRIVATE = 519,
     KWD_PROCEDURE = 520,
     KWD_PROGRAM = 521,
     KWD_PROTECTED = 522,
     KWD_PUBLIC = 523,
     KWD_PURE = 524,
     KWD_READ = 525,
     KWD_READ_FORMATTED = 526,
     KWD_READ_UNFORMATTED = 527,
     KWD_READWRITE = 528,
     KWD_REAL = 529,
     KWD_REC = 530,
     KWD_RECL = 531,
     KWD_RETURN = 532,
     KWD_REWIND = 533,
     KWD_ROUND = 534,
     KWD_SAVE = 535,
     KWD_SELECT_CASE = 536,
     KWD_SELECT_TYPE = 537,
     KWD_SEQUENCE = 538,
     KWD_SEQUENTIAL = 539,
     KWD_SIGN = 540,
     KWD_SIZE = 541,
     KWD_SOURCE = 542,
     KWD_STATUS = 543,
     KWD_STOP = 544,
     KWD_STREAM = 545,
     KWD_SUBMODULE = 546,
     KWD_SUBROUTINE = 547,
     KWD_TARGET = 548,
     KWD_THEN = 549,
     KWD_TRUE = 550,
     KWD_TYPE = 551,
     KWD_UNFORMATTED = 552,
     KWD_UNIT = 553,
     KWD_USE = 554,
     KWD_VALUE = 555,
     KWD_VOLATILE = 556,
     KWD_WHERE = 557,
     KWD_WRITE = 558,
     KWD_WRITE_FORMATTED = 559,
     KWD_WRITE_UNFORMATTED = 560,
     PPD_NULL = 561,
     PPD_DEFINE = 562,
     PPD_ELIF = 563,
     PPD_ELSE = 564,
     PPD_ENDIF = 565,
     PPD_ERROR = 566,
     PPD_WARNING = 567,
     PPD_IF = 568,
     PPD_IFDEF = 569,
     PPD_IFNDEF = 570,
     PPD_INCLUDE = 571,
     PPD_LINE = 572,
     PPD_PRAGMA = 573,
     PPD_UNDEF = 574,
     OP_LOGICAL_NOT = 575,
     OP_NE = 576,
     OP_STRINGIZE = 577,
     OP_TOKEN_SPLICE = 578,
     OP_MODULO = 579,
     ALT_OP_TOKEN_SPLICE = 580,
     OP_ASSIGN_MODULO = 581,
     OP_BIT_AND = 582,
     OP_ADDRESS = 583,
     OP_LOGICAL_AND = 584,
     OP_ASSIGN_BIT_AND = 585,
     OP_DEREFERENCE = 586,
     OP_MULTIPLY = 587,
     OP_ASSIGN_MULTIPLY = 588,
     OP_PLUS = 589,
     OP_INCREMENT = 590,
     OP_ASSIGN_PLUS = 591,
     OP_MINUS = 592,
     OP_DECREMENT = 593,
     OP_ASSIGN_MINUS = 594,
     OP_POINTER_MEMBER = 595,
     OP_POINTER_POINTER_TO_MEMBER = 596,
     OP_OBJECT_MEMBER = 597,
     OP_OBJECT_POINTER_TO_MEMBER = 598,
     OP_DIVIDE = 599,
     OP_ASSIGN_DIVIDE = 600,
     OP_ELSE = 601,
     OP_SCOPE_REF = 602,
     OP_LT = 603,
     OP_SHIFT_LEFT = 604,
     OP_ASSIGN_SHIFT_LEFT = 605,
     OP_LE = 606,
     OP_ASSIGN = 607,
     OP_EQ = 608,
     OP_GT = 609,
     OP_GE = 610,
     OP_SHIFT_RIGHT = 611,
     OP_ASSIGN_SHIFT_RIGHT = 612,
     OP_CONDITIONAL = 613,
     OP_BIT_PLUS = 614,
     OP_ASSIGN_BIT_PLUS = 615,
     OP_BIT_OR = 616,
     OP_ASSIGN_BIT_OR = 617,
     OP_LOGICAL_OR = 618,
     OP_BIT_NOT = 619,
     OP_ALT_LOGICAL_AND = 620,
     OP_ALT_ASSIGN_BIT_AND = 621,
     OP_ALT_BIT_AND = 622,
     OP_ALT_BIT_OR = 623,
     OP_ALT_BIT_NOT = 624,
     OP_ALT_LOGICAL_NOT = 625,
     OP_ALT_NE = 626,
     OP_ALT_LOGICAL_OR = 627,
     OP_ALT_ASSIGN_BIT_OR = 628,
     OP_ALT_BIT_PLUS = 629,
     OP_ALT_ASSIGN_BIT_PLUS = 630,
     INV_ALT_LOGICAL_AND = 631,
     INV_ALT_ASSIGN_BIT_AND = 632,
     INV_ALT_BIT_AND = 633,
     INV_ALT_BIT_OR = 634,
     INV_ALT_BIT_NOT = 635,
     INV_ALT_LOGICAL_NOT = 636,
     INV_ALT_NE = 637,
     INV_ALT_LOGICAL_OR = 638,
     INV_ALT_ASSIGN_BIT_OR = 639,
     INV_ALT_BIT_PLUS = 640,
     INV_ALT_ASSIGN_BIT_PLUS = 641,
     INV_MFI_LOGICAL_AND = 642,
     INV_MFI_ASSIGN_BIT_AND = 643,
     INV_MFI_BIT_AND = 644,
     INV_MFI_BIT_OR = 645,
     INV_MFI_BIT_NOT = 646,
     INV_MFI_LOGICAL_NOT = 647,
     INV_MFI_NE = 648,
     INV_MFI_LOGICAL_OR = 649,
     INV_MFI_ASSIGN_BIT_OR = 650,
     INV_MFI_BIT_PLUS = 651,
     INV_MFI_ASSIGN_BIT_PLUS = 652,
     DECL_REFERENCE = 653,
     DECL_POINTER = 654,
     DECL_VAR_ARGS = 655,
     SYSTEM_HEADER_STRING = 656,
     HEADER_STRING = 657,
     IDENTIFIER = 658,
     NON_REPLACEABLE_IDENTIFIER = 659,
     MACRO_FUNCTION_IDENTIFIER = 660,
     MACRO_OBJECT_IDENTIFIER = 661,
     PP_NUMBER = 662,
     CHARACTER_LITERAL = 663,
     L_CHARACTER_LITERAL = 664,
     STRING_LITERAL = 665,
     L_STRING_LITERAL = 666,
     INTEGER_LITERAL = 667,
     OCTAL_LITERAL = 668,
     DECIMAL_LITERAL = 669,
     HEXADECIMAL_LITERAL = 670,
     FLOATING_LITERAL = 671,
     UNIVERSAL_CHARACTER_NAME = 672,
     USE_ON_CODE = 673,
     PUNC_INITIALIZE = 674,
     PUNC_SYNONYM = 675,
     DONT_CARE = 676,
     RESERVED_WORD = 677,
     ACCESS_SPECIFIER = 678,
     BOOLEAN_LITERAL = 679,
     CV_QUALIFIER = 680,
     INTRINSIC_TYPE = 681,
     FUNCTION_SPECIFIER = 682,
     STORAGE_CLASS_SPECIFIER = 683,
     USER_TOKEN = 684,
     SYMBOL = 685,
     COMMENT = 686,
     BLOCK_COMMENT = 687,
     END_OF_STATEMENT = 688,
     BLOCK_OPEN = 689,
     BLOCK_CLOSE = 690,
     LIST_OPEN = 691,
     LIST_SEPARATOR = 692,
     LIST_CLOSE = 693
   };
#endif
/* Tokens.  */
#define ECS_NULL 258
#define ASC_SOH 259
#define ASC_STX 260
#define ASC_ETX 261
#define ASC_EOT 262
#define ASC_ENQ 263
#define ASC_ACK 264
#define ECS_ALERT 265
#define ECS_BACKSPACE 266
#define BCS_WHTSP_TAB 267
#define BCS_WHTSP_NEWLINE 268
#define BCS_WHTSP_VERTICAL_TAB 269
#define BCS_WHTSP_FORMFEED 270
#define ECS_CARRIAGE_RETURN 271
#define ASC_SHIFT_OUT 272
#define ASC_SHIFT_IN 273
#define ASC_DLE 274
#define ASC_DC1 275
#define ASC_DC2 276
#define ASC_DC3 277
#define ASC_DC4 278
#define ASC_NAK 279
#define ASC_SYN 280
#define ASC_ETB 281
#define ASC_CAN 282
#define ASC_EM 283
#define ASC_SUB 284
#define ASC_ESC 285
#define ASC_IS4 286
#define ASC_IS3 287
#define ASC_IS2 288
#define ASC_IS1 289
#define BCS_WHTSP_SPACE 290
#define BCS_PUNCT_EXCLAMATION 291
#define BCS_PUNCT_QUOTE 292
#define BCS_PUNCT_HASH 293
#define ASC_DOLLAR_SIGN 294
#define BCS_PUNCT_PERCENT 295
#define BCS_PUNCT_AMPERSAND 296
#define BCS_PUNCT_APOSTROPHE 297
#define BCS_PUNCT_OPEN_PARENTHESIS 298
#define BCS_PUNCT_CLOSE_PARENTHESIS 299
#define BCS_PUNCT_ASTERISK 300
#define BCS_PUNCT_PLUS 301
#define BCS_PUNCT_COMMA 302
#define BCS_PUNCT_MINUS 303
#define BCS_PUNCT_PERIOD 304
#define BCS_PUNCT_SLASH 305
#define BCS_DIGIT_0 306
#define BCS_DIGIT_1 307
#define BCS_DIGIT_2 308
#define BCS_DIGIT_3 309
#define BCS_DIGIT_4 310
#define BCS_DIGIT_5 311
#define BCS_DIGIT_6 312
#define BCS_DIGIT_7 313
#define BCS_DIGIT_8 314
#define BCS_DIGIT_9 315
#define BCS_PUNCT_COLON 316
#define BCS_PUNCT_SEMICOLON 317
#define BCS_PUNCT_LESS_THAN 318
#define BCS_PUNCT_EQUAL 319
#define BCS_PUNCT_GREATER_THAN 320
#define BCS_PUNCT_QUESTION 321
#define ASC_AT_SIGN 322
#define BCS_UPPER_A 323
#define BCS_UPPER_B 324
#define BCS_UPPER_C 325
#define BCS_UPPER_D 326
#define BCS_UPPER_E 327
#define BCS_UPPER_F 328
#define BCS_UPPER_G 329
#define BCS_UPPER_H 330
#define BCS_UPPER_I 331
#define BCS_UPPER_J 332
#define BCS_UPPER_K 333
#define BCS_UPPER_L 334
#define BCS_UPPER_M 335
#define BCS_UPPER_N 336
#define BCS_UPPER_O 337
#define BCS_UPPER_P 338
#define BCS_UPPER_Q 339
#define BCS_UPPER_R 340
#define BCS_UPPER_S 341
#define BCS_UPPER_T 342
#define BCS_UPPER_U 343
#define BCS_UPPER_V 344
#define BCS_UPPER_W 345
#define BCS_UPPER_X 346
#define BCS_UPPER_Y 347
#define BCS_UPPER_Z 348
#define BCS_PUNCT_OPEN_BRACKET 349
#define BCS_PUNCT_BACKSLASH 350
#define BCS_PUNCT_CLOSE_BRACKET 351
#define BCS_PUNCT_CARET 352
#define BCS_PUNCT_UNDERSCORE 353
#define BCS_LOWER_A 354
#define BCS_LOWER_B 355
#define BCS_LOWER_C 356
#define BCS_LOWER_D 357
#define BCS_LOWER_E 358
#define BCS_LOWER_F 359
#define BCS_LOWER_G 360
#define BCS_LOWER_H 361
#define BCS_LOWER_I 362
#define BCS_LOWER_J 363
#define BCS_LOWER_K 364
#define BCS_LOWER_L 365
#define BCS_LOWER_M 366
#define BCS_LOWER_N 367
#define BCS_LOWER_O 368
#define BCS_LOWER_P 369
#define BCS_LOWER_Q 370
#define BCS_LOWER_R 371
#define BCS_LOWER_S 372
#define BCS_LOWER_T 373
#define BCS_LOWER_U 374
#define BCS_LOWER_V 375
#define BCS_LOWER_W 376
#define BCS_LOWER_X 377
#define BCS_LOWER_Y 378
#define BCS_LOWER_Z 379
#define BCS_PUNCT_OPEN_BRACE 380
#define BCS_PUNCT_VERTICAL_BAR 381
#define BCS_PUNCT_CLOSE_BRACE 382
#define BCS_PUNCT_TILDE 383
#define ASC_DEL 384
#define ALT_PUNCT_OPEN_BRACE 385
#define ALT_PUNCT_CLOSE_BRACE 386
#define ALT_PUNCT_OPEN_BRACKET 387
#define ALT_PUNCT_CLOSE_BRACKET 388
#define ALT_PUNCT_HASH 389
#define KWD_ABSTRACT 390
#define KWD_ABSTRACT_INTERFACE 391
#define KWD_ACCESS 392
#define KWD_ACTION 393
#define KWD_ADVANCE 394
#define KWD_ALLOCATABLE 395
#define KWD_ALLOCATE 396
#define KWD_ASSIGN 397
#define KWD_ASSOCIATE 398
#define KWD_ASYNCHRONOUS 399
#define KWD_BACKSPACE 400
#define KWD_BIND 401
#define KWD_BLANK 402
#define KWD_BLOCK 403
#define KWD_BLOCK_DATA 404
#define KWD_CALL 405
#define KWD_CASE 406
#define KWD_CHARACTER 407
#define KWD_CLASS 408
#define KWD_CLASS_DEFAULT 409
#define KWD_CLASS_IS 410
#define KWD_CLOSE 411
#define KWD_COMMON 412
#define KWD_COMPLEX 413
#define KWD_CONTAINS 414
#define KWD_CONTIGUOUS 415
#define KWD_CONTINUE 416
#define KWD_CYCLE 417
#define KWD_DATA 418
#define KWD_DEALLOCATE 419
#define KWD_DEFAULT 420
#define KWD_DEFERRED 421
#define KWD_DIMENSION 422
#define KWD_DIRECT 423
#define KWD_DO 424
#define KWD_DOUBLE 425
#define KWD_DOUBLE_COMPLEX 426
#define KWD_DOUBLE_PRECISION 427
#define KWD_ELEMENTAL 428
#define KWD_ELSE 429
#define KWD_ELSE_IF 430
#define KWD_ELSE_WHERE 431
#define KWD_ENCODING 432
#define KWD_END 433
#define KWD_END_ASSOCIATE 434
#define KWD_END_BLOCK 435
#define KWD_END_BLOCK_DATA 436
#define KWD_END_DO 437
#define KWD_END_ENUM 438
#define KWD_END_FILE 439
#define KWD_END_FORALL 440
#define KWD_END_FUNCTION 441
#define KWD_END_IF 442
#define KWD_END_INTERFACE 443
#define KWD_END_MODULE 444
#define KWD_END_PROCEDURE 445
#define KWD_END_PROGRAM 446
#define KWD_END_SELECT 447
#define KWD_END_SUBMODULE 448
#define KWD_END_SUBROUTINE 449
#define KWD_END_TYPE 450
#define KWD_END_WHERE 451
#define KWD_ENTRY 452
#define KWD_EOR 453
#define KWD_EQUIVALENCE 454
#define KWD_ERR 455
#define KWD_ERRMSG 456
#define KWD_EXIST 457
#define KWD_EXIT 458
#define KWD_EXTENDS 459
#define KWD_EXTENSIBLE 460
#define KWD_EXTERNAL 461
#define KWD_FALSE 462
#define KWD_FILE 463
#define KWD_FINAL 464
#define KWD_FLUSH 465
#define KWD_FMT 466
#define KWD_FORALL 467
#define KWD_FORM 468
#define KWD_FORMAT 469
#define KWD_FORMATTED 470
#define KWD_FUNCTION 471
#define KWD_GENERIC 472
#define KWD_GOTO 473
#define KWD_IF 474
#define KWD_IMPLICIT 475
#define KWD_IMPLICIT_NONE 476
#define KWD_IMPORT 477
#define KWD_IMPURE 478
#define KWD_IN 479
#define KWD_IN_OUT 480
#define KWD_INCLUDE 481
#define KWD_INQUIRE 482
#define KWD_INTEGER 483
#define KWD_INTENT 484
#define KWD_INTERFACE 485
#define KWD_INTRINSIC 486
#define KWD_IOSTAT 487
#define KWD_IOMSG 488
#define KWD_KIND 489
#define KWD_LET 490
#define KWD_LOGICAL 491
#define KWD_MODULE 492
#define KWD_MOLD 493
#define KWD_NAME 494
#define KWD_NAMED 495
#define KWD_NAMELIST 496
#define KWD_NEXTREC 497
#define KWD_NON_INTRINSIC 498
#define KWD_NON_OVERRIDABLE 499
#define KWD_NONKIND 500
#define KWD_NONE 501
#define KWD_NOPASS 502
#define KWD_NULLIFY 503
#define KWD_NUMBER 504
#define KWD_OPEN 505
#define KWD_OPENED 506
#define KWD_OPERATOR 507
#define KWD_OPTIONAL 508
#define KWD_OUT 509
#define KWD_PAD 510
#define KWD_PARAMETER 511
#define KWD_PASS 512
#define KWD_PAUSE 513
#define KWD_PENDING 514
#define KWD_POINTER 515
#define KWD_POSITION 516
#define KWD_PRECISION 517
#define KWD_PRINT 518
#define KWD_PRIVATE 519
#define KWD_PROCEDURE 520
#define KWD_PROGRAM 521
#define KWD_PROTECTED 522
#define KWD_PUBLIC 523
#define KWD_PURE 524
#define KWD_READ 525
#define KWD_READ_FORMATTED 526
#define KWD_READ_UNFORMATTED 527
#define KWD_READWRITE 528
#define KWD_REAL 529
#define KWD_REC 530
#define KWD_RECL 531
#define KWD_RETURN 532
#define KWD_REWIND 533
#define KWD_ROUND 534
#define KWD_SAVE 535
#define KWD_SELECT_CASE 536
#define KWD_SELECT_TYPE 537
#define KWD_SEQUENCE 538
#define KWD_SEQUENTIAL 539
#define KWD_SIGN 540
#define KWD_SIZE 541
#define KWD_SOURCE 542
#define KWD_STATUS 543
#define KWD_STOP 544
#define KWD_STREAM 545
#define KWD_SUBMODULE 546
#define KWD_SUBROUTINE 547
#define KWD_TARGET 548
#define KWD_THEN 549
#define KWD_TRUE 550
#define KWD_TYPE 551
#define KWD_UNFORMATTED 552
#define KWD_UNIT 553
#define KWD_USE 554
#define KWD_VALUE 555
#define KWD_VOLATILE 556
#define KWD_WHERE 557
#define KWD_WRITE 558
#define KWD_WRITE_FORMATTED 559
#define KWD_WRITE_UNFORMATTED 560
#define PPD_NULL 561
#define PPD_DEFINE 562
#define PPD_ELIF 563
#define PPD_ELSE 564
#define PPD_ENDIF 565
#define PPD_ERROR 566
#define PPD_WARNING 567
#define PPD_IF 568
#define PPD_IFDEF 569
#define PPD_IFNDEF 570
#define PPD_INCLUDE 571
#define PPD_LINE 572
#define PPD_PRAGMA 573
#define PPD_UNDEF 574
#define OP_LOGICAL_NOT 575
#define OP_NE 576
#define OP_STRINGIZE 577
#define OP_TOKEN_SPLICE 578
#define OP_MODULO 579
#define ALT_OP_TOKEN_SPLICE 580
#define OP_ASSIGN_MODULO 581
#define OP_BIT_AND 582
#define OP_ADDRESS 583
#define OP_LOGICAL_AND 584
#define OP_ASSIGN_BIT_AND 585
#define OP_DEREFERENCE 586
#define OP_MULTIPLY 587
#define OP_ASSIGN_MULTIPLY 588
#define OP_PLUS 589
#define OP_INCREMENT 590
#define OP_ASSIGN_PLUS 591
#define OP_MINUS 592
#define OP_DECREMENT 593
#define OP_ASSIGN_MINUS 594
#define OP_POINTER_MEMBER 595
#define OP_POINTER_POINTER_TO_MEMBER 596
#define OP_OBJECT_MEMBER 597
#define OP_OBJECT_POINTER_TO_MEMBER 598
#define OP_DIVIDE 599
#define OP_ASSIGN_DIVIDE 600
#define OP_ELSE 601
#define OP_SCOPE_REF 602
#define OP_LT 603
#define OP_SHIFT_LEFT 604
#define OP_ASSIGN_SHIFT_LEFT 605
#define OP_LE 606
#define OP_ASSIGN 607
#define OP_EQ 608
#define OP_GT 609
#define OP_GE 610
#define OP_SHIFT_RIGHT 611
#define OP_ASSIGN_SHIFT_RIGHT 612
#define OP_CONDITIONAL 613
#define OP_BIT_PLUS 614
#define OP_ASSIGN_BIT_PLUS 615
#define OP_BIT_OR 616
#define OP_ASSIGN_BIT_OR 617
#define OP_LOGICAL_OR 618
#define OP_BIT_NOT 619
#define OP_ALT_LOGICAL_AND 620
#define OP_ALT_ASSIGN_BIT_AND 621
#define OP_ALT_BIT_AND 622
#define OP_ALT_BIT_OR 623
#define OP_ALT_BIT_NOT 624
#define OP_ALT_LOGICAL_NOT 625
#define OP_ALT_NE 626
#define OP_ALT_LOGICAL_OR 627
#define OP_ALT_ASSIGN_BIT_OR 628
#define OP_ALT_BIT_PLUS 629
#define OP_ALT_ASSIGN_BIT_PLUS 630
#define INV_ALT_LOGICAL_AND 631
#define INV_ALT_ASSIGN_BIT_AND 632
#define INV_ALT_BIT_AND 633
#define INV_ALT_BIT_OR 634
#define INV_ALT_BIT_NOT 635
#define INV_ALT_LOGICAL_NOT 636
#define INV_ALT_NE 637
#define INV_ALT_LOGICAL_OR 638
#define INV_ALT_ASSIGN_BIT_OR 639
#define INV_ALT_BIT_PLUS 640
#define INV_ALT_ASSIGN_BIT_PLUS 641
#define INV_MFI_LOGICAL_AND 642
#define INV_MFI_ASSIGN_BIT_AND 643
#define INV_MFI_BIT_AND 644
#define INV_MFI_BIT_OR 645
#define INV_MFI_BIT_NOT 646
#define INV_MFI_LOGICAL_NOT 647
#define INV_MFI_NE 648
#define INV_MFI_LOGICAL_OR 649
#define INV_MFI_ASSIGN_BIT_OR 650
#define INV_MFI_BIT_PLUS 651
#define INV_MFI_ASSIGN_BIT_PLUS 652
#define DECL_REFERENCE 653
#define DECL_POINTER 654
#define DECL_VAR_ARGS 655
#define SYSTEM_HEADER_STRING 656
#define HEADER_STRING 657
#define IDENTIFIER 658
#define NON_REPLACEABLE_IDENTIFIER 659
#define MACRO_FUNCTION_IDENTIFIER 660
#define MACRO_OBJECT_IDENTIFIER 661
#define PP_NUMBER 662
#define CHARACTER_LITERAL 663
#define L_CHARACTER_LITERAL 664
#define STRING_LITERAL 665
#define L_STRING_LITERAL 666
#define INTEGER_LITERAL 667
#define OCTAL_LITERAL 668
#define DECIMAL_LITERAL 669
#define HEXADECIMAL_LITERAL 670
#define FLOATING_LITERAL 671
#define UNIVERSAL_CHARACTER_NAME 672
#define USE_ON_CODE 673
#define PUNC_INITIALIZE 674
#define PUNC_SYNONYM 675
#define DONT_CARE 676
#define RESERVED_WORD 677
#define ACCESS_SPECIFIER 678
#define BOOLEAN_LITERAL 679
#define CV_QUALIFIER 680
#define INTRINSIC_TYPE 681
#define FUNCTION_SPECIFIER 682
#define STORAGE_CLASS_SPECIFIER 683
#define USER_TOKEN 684
#define SYMBOL 685
#define COMMENT 686
#define BLOCK_COMMENT 687
#define END_OF_STATEMENT 688
#define BLOCK_OPEN 689
#define BLOCK_CLOSE 690
#define LIST_OPEN 691
#define LIST_SEPARATOR 692
#define LIST_CLOSE 693




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE

{
  float fval;
  char *sval;
  unsigned int uval;
  int ival;
  long lval;
}
/* Line 1489 of yacc.c.  */

	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yypp_lval;

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYLTYPE yypp_lloc;
